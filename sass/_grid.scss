@use "sass:math";

$grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px,
);
$container-max-widths: (
    sm: 540px,
    md: 720px,
    lg: 960px,
    xl: 1140px,
    xxl: 1320px,
);
$grid-columns: 12;
$grid-row-columns: 6 !default;
$grid-gutter-width: 24px !default;
$spacer: 16px !default;
$gutters: (
    0: 0,
    1: $spacer * 0.25,
    2: $spacer * 0.5,
    3: $spacer,
    4: $spacer * 1.5,
    5: $spacer * 3,
);

@mixin width-column($property, $i) {
    #{$property}: if($i > 0, math.div(100%, $grid-columns) * $i, 0);
}

@mixin spacing-x($property, $value: auto) {
    #{$property}-right: $value;
    #{$property}-left: $value;
}

.container-fluid {
    --grid-gutter-x: #{$grid-gutter-width};
    --grid-gutter-y: 0;

    width: 100%;
    @include spacing-x(padding, calc(var(--grid-gutter-x) * 0.5));
    @include spacing-x($property: margin);
}

.container {
    @extend .container-fluid;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-top: calc(var(--grid-gutter-y) * -1);
    @include spacing-x(margin, calc(var(--grid-gutter-x) * 0.5 * -1));

    > * {
        @include spacing-x(padding, calc(var(--grid-gutter-x) * 0.5));
        margin-top: var(--grid-gutter-y);
    }
}

.col {
    flex: 1 0;
}

@mixin make-media-query($dimension, $bypass: false) {
    @if $bypass {
        @content;
    } @else {
        @media (min-width: $dimension) {
            @content;
        }
    }
}

@mixin make-row-columns($infix) {
    @for $i from 1 through $grid-row-columns {
        .row.row-cols#{$infix}-#{$i} > * {
            flex: 0 0 auto;
            width: math.div(100%, $i);
        }
    }
}

@mixin make-columns($infix) {
    @for $i from 1 through $grid-columns {
        .col#{$infix}-#{$i} {
            flex: 0 0 auto;
            @include width-column("width", $i);
        }
    }
}

@mixin make-offsets($infix) {
    @for $i from 0 to $grid-columns {
        .offset#{$infix}-#{$i} {
            @include width-column("margin-left", $i);
        }
    }
}

@mixin set-gutter($in-sub-fix, $side, $ratio) {
    .g#{$in-sub-fix},
    .g#{$side}#{$in-sub-fix} {
        --grid-gutter-#{$side}: #{$ratio};
    }
}

@mixin make-gutters($infix) {
    @each $i, $ratio in $gutters {
        @include set-gutter(#{$infix}-#{$i}, x, $ratio);
        @include set-gutter(#{$infix}-#{$i}, y, $ratio);
    }
}

@each $breakpoint, $dimension in $grid-breakpoints {
    $max-width: map-get($container-max-widths, $breakpoint);
    $is-xs: $breakpoint == xs;
    $infix: if($is-xs, "", "-#{$breakpoint}");

    @include make-media-query($dimension, $is-xs) {
        .container {
            max-width: $max-width;
        }

        @include make-row-columns($infix);
        @include make-columns($infix);
        @include make-offsets($infix);
        @include make-gutters($infix);
    }
}
